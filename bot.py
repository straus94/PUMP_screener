import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello world!")

def main():
    # –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä BOT_TOKEN
    token = os.environ.get("BOT_TOKEN", "NoTokenFound")

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º.
    if token == "NoTokenFound":
        logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    app = ApplicationBuilder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    app.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    app.run_polling()

if __name__ == "__main__":
    main()


# import platform
# import asyncio

# # 1) –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ Windows SelectorEventLoopPolicy –¥–æ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# if platform.system() == "Windows":
#     asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# import logging
# import os
# import sys
# from datetime import datetime, timedelta, timezone

# from telegram import Update
# from telegram.ext import (
#     ApplicationBuilder,
#     CommandHandler,
#     ContextTypes
# )
# from binance.client import Client as BinanceClient
# from dotenv import load_dotenv

# price_history = {}
# user_settings = {}
# binance_client = None

# def check_env():
#     load_dotenv()
#     BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
#     BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')
#     TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

#     if not all([BINANCE_API_KEY, BINANCE_API_SECRET, TELEGRAM_TOKEN]):
#         logging.error("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
#         sys.exit(1)

#     return BINANCE_API_KEY, BINANCE_API_SECRET, TELEGRAM_TOKEN


# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(
#         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–º–ø–æ–≤ –Ω–∞ Binance.\n"
#         "–ò—Å–ø–æ–ª—å–∑—É–π /setpump <%> <–º–∏–Ω—É—Ç> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
#         "–ù–∞–ø—Ä–∏–º–µ—Ä: /setpump 5 10 - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞–º–ø –æ—Ç 5% –∑–∞ 10 –º–∏–Ω—É—Ç."
#     )


# async def setpump(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     try:
#         percent = float(context.args[0])
#         minutes = int(context.args[1])
#         if not (1 <= percent <= 100) or not (1 <= minutes <= 30):
#             raise ValueError
#         user_id = update.message.from_user.id
#         user_settings[user_id] = {'percent': percent, 'minutes': minutes}
#         await update.message.reply_text(
#             f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –ü–∞–º–ø ‚â• {percent}% –∑–∞ {minutes} –º–∏–Ω—É—Ç."
#         )
#     except (IndexError, ValueError):
#         await update.message.reply_text(
#             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /setpump <%> <–º–∏–Ω—É—Ç>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /setpump 5 10"
#         )


# def get_binance_prices():
#     prices = binance_client.futures_mark_price()
#     return {item['symbol']: float(item['markPrice']) for item in prices}


# async def monitor_pumps(app):
#     while True:
#         current_time = datetime.now(timezone.utc)
#         binance_prices = get_binance_prices()

#         # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
#         for symbol, price in binance_prices.items():
#             if symbol not in price_history:
#                 price_history[symbol] = []
#             price_history[symbol].append({'time': current_time, 'price': price})

#             cutoff = current_time - timedelta(minutes=30)
#             price_history[symbol] = [
#                 entry for entry in price_history[symbol]
#                 if entry['time'] >= cutoff
#             ]

#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#         for user_id, settings in user_settings.items():
#             percent = settings['percent']
#             minutes = settings['minutes']
#             cutoff_time = current_time - timedelta(minutes=minutes)

#             for symbol, history in price_history.items():
#                 initial_prices = [
#                     entry for entry in history
#                     if entry['time'] <= cutoff_time
#                 ]
#                 if not initial_prices:
#                     continue

#                 initial_price = initial_prices[0]['price']
#                 current_price = history[-1]['price']
#                 change = ((current_price - initial_price) / initial_price) * 100

#                 if change >= percent:
#                     message = (
#                         f"üöÄ –ü–∞–º–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω!\n"
#                         f"–ü–∞—Ä–∞: {symbol}\n"
#                         f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:.2f}% –∑–∞ {minutes} –º–∏–Ω."
#                     )
#                     try:
#                         await app.bot.send_message(chat_id=user_id, text=message)
#                         price_history[symbol] = []
#                     except Exception as e:
#                         logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

#         await asyncio.sleep(60)


# async def main():
#     BINANCE_API_KEY, BINANCE_API_SECRET, TELEGRAM_TOKEN = check_env()

#     global binance_client
#     binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)

#     application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(CommandHandler("setpump", setpump))

#     # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
#     asyncio.create_task(monitor_pumps(application))

#     # –°—Ç–∞—Ä—Ç—É–µ–º –±–æ—Ç–∞
#     await application.run_polling()


# if __name__ == "__main__":
#     logging.basicConfig(
#         format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
#         level=logging.INFO
#     )

#     asyncio.run(main())
