import logging
import asyncio
import os
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from binance.client import Client as BinanceClient
from pybit import HTTP
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API-–∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY')
BINANCE_API_SECRET = os.getenv('BINANCE_API_SECRET')

# BYBIT_API_KEY = os.getenv('BYBIT_API_KEY')
# BYBIT_API_SECRET = os.getenv('BYBIT_API_SECRET')

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
binance_client = BinanceClient(BINANCE_API_KEY, BINANCE_API_SECRET)
# bybit_client = HTTP(
#     endpoint="https://api.bybit.com",
#     api_key=BYBIT_API_KEY,
#     api_secret=BYBIT_API_SECRET
# )

# –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–º–ø–æ–≤ –Ω–∞ Binance –∏ ByBit.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /setpump <%> <–º–∏–Ω—É—Ç> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /setpump 5 10 - –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞–º–ø –æ—Ç 5% –∑–∞ 10 –º–∏–Ω—É—Ç."
    )

# –ö–æ–º–∞–Ω–¥–∞ /setpump
async def setpump(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        percent = float(context.args[0])
        minutes = int(context.args[1])
        if not (1 <= percent <= 100) or not (1 <= minutes <= 30):
            raise ValueError
        user_id = update.message.from_user.id
        user_settings[user_id] = {'percent': percent, 'minutes': minutes}
        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –ü–∞–º–ø ‚â• {percent}% –∑–∞ {minutes} –º–∏–Ω—É—Ç."
        )
    except (IndexError, ValueError):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /setpump <%> <–º–∏–Ω—É—Ç>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /setpump 5 10"
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å Binance
def get_binance_prices():
    prices = binance_client.futures_mark_price()
    return {item['symbol']: float(item['markPrice']) for item in prices}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Å ByBit
# def get_bybit_prices():
#     response = bybit_client.latest_information_for_symbol()
#     prices = {}
#     if 'result' in response:
#         for item in response['result']:
#             symbol = item['symbol']
#             last_price = float(item['last_price'])
#             prices[symbol] = last_price
#     return prices

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
price_history = {}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def monitor_pumps(app):
    while True:
        current_time = datetime.utcnow()
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
        binance_prices = get_binance_prices()
        # bybit_prices = get_bybit_prices()
        # all_prices = {**binance_prices, **bybit_prices}
        all_prices = {**binance_prices}

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
        for symbol, price in all_prices.items():
            if symbol not in price_history:
                price_history[symbol] = []
            price_history[symbol].append({'time': current_time, 'price': price})
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 30 –º–∏–Ω—É—Ç)
            cutoff = current_time - timedelta(minutes=30)
            price_history[symbol] = [entry for entry in price_history[symbol] if entry['time'] >= cutoff]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id, settings in user_settings.items():
            percent = settings['percent']
            minutes = settings['minutes']
            cutoff_time = current_time - timedelta(minutes=minutes)
            for symbol, history in price_history.items():
                # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—É –≤ –Ω–∞—á–∞–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                initial_prices = [entry for entry in history if entry['time'] <= cutoff_time]
                if not initial_prices:
                    continue
                initial_price = initial_prices[0]['price']
                current_price = history[-1]['price']
                change = ((current_price - initial_price) / initial_price) * 100
                if change >= percent:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    message = (
                        f"üöÄ –ü–∞–º–ø –æ–±–Ω–∞—Ä—É–∂–µ–Ω!\n"
                        f"–ü–∞—Ä–∞: {symbol}\n"
                        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:.2f}% –∑–∞ {minutes} –º–∏–Ω—É—Ç."
                    )
                    try:
                        await app.bot.send_message(chat_id=user_id, text=message)
                        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        price_history[symbol] = []
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("setpump", setpump))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    application.job_queue.run_once(lambda context: asyncio.create_task(monitor_pumps(application)), 0)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
